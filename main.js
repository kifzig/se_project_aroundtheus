!function(){"use strict";class e{constructor(e,t,s,i,r,n){let{name:o,link:a,owner:l,_id:c,likes:d}=e;this.name=o,this.link=a,this._ownerId=l._id,this._myID=n,this.imageID=c,this._likes=d,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteCardPopup=i,this._handleLikeClick=r}_getData(){return{name:this.name,link:this.link,imageId:this.imageID,card:this}}_setEventListeners=()=>{this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this)})),this._myID===this._ownerId&&this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>{this._handleDeleteCardPopup(this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleCardClick(this._getData())}))};handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}isLiked(){return this._likes.some((e=>e._id===this._myID))}_fillCardTemplate(){const e=this._cardElement.querySelector(".card__image");e.src=this.link,e.alt=this.name,this._cardElement.id=this.imageID,this._cardElement.querySelector(".card__caption").textContent=this.name,this._myID!==this._ownerId&&this._cardElement.querySelector(".card__delete-button").remove(),this._renderLikes()}setLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this._cardElement.querySelector(".card__like-count").textContent=this._likes.length;const e=this._cardElement.querySelector(".card__like-button");this.isLiked()?e.classList.add("card__like-button_active"):e.classList.remove("card__like-button_active")}_handleLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getTemplate(),this._fillCardTemplate(),this._setEventListeners(),this._cardElement}}class t{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),this._setEventListeners()}close(){this._popupElement.classList.remove("modal_opened"),this._removeEventListeners()}_handleClickClose=e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__close-button"))&&this.close()};_handleEscClose=e=>{"Escape"===e.key&&this.close()};_removeEventListeners(){document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleClickClose)}_setEventListeners(){this._popupElement.addEventListener("click",this._handleClickClose),document.addEventListener("keydown",this._handleEscClose)}}document.querySelector(".profile__title"),document.querySelector(".profile__description");const s=document.querySelector(".profile__image_edit"),i=(document.querySelector(".modal__input_type_url"),document.querySelector(".modal__input_type_title")),r=document.querySelector(".modal__input_type_description"),n=(document.querySelector("#edit-profile-modal"),document.querySelector(".profile__edit-button")),o=(document.forms["edit-profile-form"],document.querySelector("#preview-image-modal"),document.querySelector(".modal__preview_caption")),a=document.querySelector(".modal__preview_image");class l extends t{constructor(e,t,s,i){super({popupSelector:e}),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._buttonText=s,this._loadingButtonText=i,this._submitButton=this._popupElement.querySelector(".modal__button")}close(){this._popupForm.reset(),super.close(),this._popupElement.removeEventListener("submit",this._handleSubmit)}showLoading(){this._submitButton.textContent=this._loadingButtonText}hideLoading(){this._submitButton.textContent=this._buttonText}_getInputValues(){const e={};return document.querySelectorAll(".modal__input").forEach((function(t){""!==t.value&&(e[t.name]=t.value)})),e}_handleSubmit=()=>{const e=this._getInputValues();this._handleFormSubmit(e)};_setEventListeners(){super._setEventListeners(),this._popupElement.addEventListener("submit",this._handleSubmit)}}class c{constructor(e,t){let{items:s,renderer:i}=e;this._renderItems=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._renderItems.reverse().forEach(this._renderer)}addItem(e){this._container.prepend(e)}}const d=new class{constructor(e){this.baseUrl=e.baseUrl,this._headers=e.headers}_processResponse=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`);getInitialCards(){return fetch(`${this.baseUrl}/cards`,{headers:this._headers}).then(this._processResponse)}getImageInfo(e){return fetch(`${this.baseUrl}/cards/${e}`,{headers:this._headers}).then(this._processResponse)}getUserInfo(){return fetch(`${this.baseUrl}/users/me`,{headers:this._headers}).then(this._processResponse)}getInitialData(){return Promise.all([this.getInitialCards(),this.getUserInfo()])}editProfile(e,t){return fetch(`${this.baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._processResponse)}addImageToApi(e,t){return fetch(`${this.baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._processResponse)}removeImageFromAPI(e){return fetch(`${this.baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}addLikeToAPI(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._processResponse)}removeLikeFromAPI(e){return fetch(`${this.baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._processResponse)}updateProfilePic(e){return fetch(`${this.baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._processResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/cohort-3-en",headers:{authorization:"dfa65752-2d8e-401e-8af5-014c787612d4","Content-Type":"application/json"}});let h;const _=new class{constructor(e,t,s){this._nameElement=document.querySelector(e),this._jobElement=document.querySelector(t),this._imgElement=document.querySelector(s)}getUserInfo(){const e={};return e.profileName=this._nameElement.textContent,e.description=this._jobElement.textContent,e}setUserInfo(e,t){this._nameElement.textContent=e,this._jobElement.textContent=t}setMyID(e){this.myID=e}getMyID(){return this.myID}setProfileImage(e){this._imgElement.src=e}getProfileImage(){return this._imgElement.src}}(".profile__title",".profile__description",".profile__image");d.getInitialData().then((e=>{let[t,s]=e;h=new c({items:t,renderer:e=>{const t=k(e,s._id);h.addItem(t)}},b),h.renderItems(),_.setUserInfo(s.name,s.about),_.setProfileImage(s.avatar)})).catch((e=>{console.error(e)}));const u={};var m;m={inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",formSelector:".modal__form"},Array.from(document.querySelectorAll(m.formSelector)).forEach((e=>{const t=new class{constructor(e,t){this._form=t,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}hasInvalidInput(){return!this._inputList.every((e=>e.validity.valid))}enableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}disableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}toggleButtonState(){this.hasInvalidInput()?this.enableButton():this.disableButton()}_setEventListeners(){this._inputList=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this.toggleButtonState()}))}))}resetFormValidation(){this.toggleButtonState(),this._form.addEventListener("reset",(e=>{this.disableButton()}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}(m,e),s=e.getAttribute("name");u[s]=t,t.enableValidation()}));const p=new l("#change-profile-pic-modal",(function(e){p.showLoading(),d.updateProfilePic(e.profilepicurl).then((t=>{_.setProfileImage(e.profilepicurl),p.close()})).catch((e=>{console.log(e)})).finally((()=>{p.hideLoading()}))}),"Save","Saving...");s.addEventListener("click",(function(){u["change-profile-pic-form"].toggleButtonState(),p.open()}));const f=new l("#edit-profile-modal",(function(e){let{title:t,description:s}=e;f.showLoading(),d.editProfile(t,s).then((e=>{_.setUserInfo(t,s),f.close()})).catch((e=>{console.error(e)})).finally((()=>{f.hideLoading()}))}),"Save","Saving...");n.addEventListener("click",(function(){const{profileName:e,description:t}=_.getUserInfo();i.value=e,r.value=t,u["edit-profile-form"].toggleButtonState(),f.open()}));const g=document.querySelector(".profile__add-button"),E=new l("#add-modal",(function(e){let{place:t,url:s}=e;E.showLoading(),d.addImageToApi(t,s).then((e=>{const t=k(e,e.owner._id);h.addItem(t),E.close()})).catch((e=>{console.log(e)})).finally((()=>{E.hideLoading()}))}),"Create","Creating...");g.addEventListener("click",(function(){u["add-image-form"].toggleButtonState(),E.open()}));const v=new class extends t{constructor(e){super({popupSelector:e})}open(e){let{name:t,link:s}=e;super.open(),o.textContent=t,a.src=s,a.alt=t}}("#preview-image-modal"),S=new class extends l{constructor(e,t,s,i){super(e,t,s,i)}open(e){super.open(),this.data=e}setSubmitAction(e){this._handleFormSubmit=e}_handleSubmit=()=>{const e=this.data;this._handleFormSubmit(e)}}("#confirm-modal",(function(e){S.showLoading(),d.removeImageFromAPI(e.imageID).then((t=>{e.handleDeleteCard(),S.close()})).catch((e=>{console.log(e)})).finally((()=>{S.hideLoading()}))}),"Yes","Deleting..."),b=".cards__list";function L(e){v.open(e)}function y(e){S.open(e)}function I(e){e.isLiked()?d.removeLikeFromAPI(e.imageID).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.error(e)})):d.addLikeToAPI(e.imageID).then((t=>{e.setLikes(t.likes)})).catch((e=>{console.error(e)}))}function k(t,s){return new e(t,"#card__template",L,y,I,s).getView()}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,